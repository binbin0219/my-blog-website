<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title><%= title || "Blog" %></title>
        <script src="https://cdn.tailwindcss.com"></script>
        <link
            href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"
            rel="stylesheet">
        <link rel="stylesheet"
            href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
        <link rel="stylesheet"
            href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
        
        <!-- main.css -->
        <link rel="stylesheet" href="/styles/main.css">
    
        <!-- Figaz One Font -->
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Fugaz+One&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">
    
    </head>

    <script>
        const routeName = <%- typeof routeName !== 'undefined' && JSON.stringify(routeName) %>;
        const userData = <%- typeof user !== 'undefined' && JSON.stringify(user) %>;
        const loader = document.createElement('div');
        loader.className = 'w-full h-full flex flex-col justify-center items-center absolute start-0 top-0 text-[6px] bg-white';
        loader.innerHTML = `
            <div class="loader mb-[.5em]"></div>
            <a href="/" class="text-[3.5em] text-indigo-600 cursor-pointer hover:text-indigo-500" style="font-family: fugaz one;">Blogify</a>
        `;

        // Confirmation Dialog
        function confDialog(header, body, actionText, action) {
            const confDialog = document.querySelector('#conf_dialog');
            const confDialogHeader = confDialog.querySelector('.conf-dialog-header');
            const confDialogBody = confDialog.querySelector('.conf-dialog-body');
            const confDialogAction = confDialog.querySelector('.conf-dialog-action');

            // Clear confirmation dialog
            confDialogHeader.innerHTML = '';
            confDialogBody.innerHTML = '';
            confDialogAction.innerHTML = '';

            // Close confirmation dialog
            if(!confDialog.classList.contains('hidden')) {
                confDialog.classList.add('hidden');
                return;
            }

            if(!header || !body || !actionText || !action) {
                confDialog.classList.add('hidden');
                return;
            }

            // Open confirmation dialog
            confDialogHeader.innerHTML = header;
            confDialogBody.innerHTML = body;
            confDialogAction.innerHTML = actionText;
            confDialogAction.onclick = action;
            confDialog.classList.remove('hidden');
        }

        document.addEventListener('DOMContentLoaded', () => {
            // Remove loader
            setTimeout(() => {
                document.querySelector('#page_loader')?.remove();
            }, 500);

            // Dropdown toggle
            const dropdownToggles = document.querySelectorAll('.dropdown-toggle');
            dropdownToggles.forEach(toggle => {
                toggle.addEventListener('click', () => {
                    const dropdown = toggle.closest('.dropdown');
                    dropdown.querySelector('.dropdown-menu').classList.toggle('show');
                });
            });
        })

        // Click outside dropdown menu to close
        document.addEventListener('click', (e) => {
            const target = e.target;
            const isDropdownChild = target.closest('.dropdown');
            const isDropdownToggle = target.classList.contains('dropdown-toggle');
            if(!isDropdownChild && !isDropdownToggle) {
                document.querySelectorAll('.dropdown-menu').forEach(menu => {
                    menu.classList.remove('show');
                })
            }
        })

        // Time ago
        function timeAgo(timestamp) {
            const currentTime = new Date();
            const givenTime = new Date(timestamp);

            const differenceInSeconds = Math.floor((currentTime - givenTime) / 1000);

            if (differenceInSeconds < 60) {
                return `${differenceInSeconds} seconds ago`;
            } else if (differenceInSeconds < 3600) {
                const minutes = Math.floor(differenceInSeconds / 60);
                return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
            } else if (differenceInSeconds < 86400) {
                const hours = Math.floor(differenceInSeconds / 3600);
                return `${hours} hour${hours > 1 ? 's' : ''} ago`;
            } else {
                const days = Math.floor(differenceInSeconds / 86400);
                return `${days} day${days > 1 ? 's' : ''} ago`;
            }
        }

        // Accept friend request
        async function acceptFriendRequest(user_id) {
            return fetch(`/api/friend-request/accept/${user_id}`)
            .then(response => {
                if(!response.ok) throw new Error('Failed to accept friend request');
                return response.json();
            })
            .then(data => {
                return data;
            })
            .catch(error => {
                throw error;
            });
        }

        // Reject friend request
        async function rejectFriendRequest(user_id) {
            return fetch(`/api/friend-request/reject/${user_id}`)
            .then(response => {
                if(!response.ok) throw new Error('Failed to reject friend request');
                return response.json();
            })
            .then(data => {
                return data;
            })
            .catch(error => {
                throw error;
            });
        }

        // Unsend friend request
        async function unsendFriendRequest(user_id) {
            return fetch(`/api/friend-request/unsend/${user_id}`)
            .then(response => {
                if(!response.ok) throw new Error('Failed to unsend friend request');
                return response.json();
            })
            .then(data => {
                return data;
            })
            .catch(error => {
                throw error;
            });
        }
    </script>
<body>

<!-- Confirmation Dialog -->
<div id="conf_dialog" class="fixed top-0 left-0 w-full h-full bg-black bg-opacity-50 flex justify-center items-start pt-10 hidden" style="z-index: 9999;">
    <div class="bg-white min-w-[400px] w-fit min-h-[200px] h-fit rounded-lg flex flex-col justify-center items-start gap-2 p-5">
        <h4 class="conf-dialog-header text-2xl font-bold"></h4>
        <div class="conf-dialog-body text-lg w-full"></div>
        <div class="flex gap-5 w-full justify-end mt-7">
            <button onclick="confDialog();" class="bg-white border-black border-2 text-black px-3 py-2 rounded-lg font-bold hover:bg-black hover:text-white">Cancel</button>
            <button class="conf-dialog-action bg-red-600 text-white px-3 py-2 rounded-lg font-bold hover:bg-red-800">Confirm</button>
        </div>
    </div>
</div>

<!-- Loader -->
<div id="page_loader" class="w-full h-full flex flex-col justify-center items-center bg-black bg-opacity-50 fixed top-0 left-0 text-[10px] backdrop-blur-sm" style="z-index: 1001;">
    <div class="loader mb-[.5em]"></div>
    <a href="/" class="text-[3.5em] text-indigo-600 cursor-pointer hover:text-indigo-500" style="font-family: fugaz one;">Blogify</a>
</div>
