<%- include('./partials/header', { title: 'Sign up' }) %>

<link rel="stylesheet" href="./styles/signup.css">
<link
    href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"
    rel="stylesheet">
<link rel="stylesheet"
    href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
<style>
    body {
        font-family: "Poppins", sans-serif;
    }
</style>

    <div class="sign-up">
        <h1 class="font-bold text-4xl">Sign up</h1>
        <form class="sign-up-form" action="/signing-up" method="post">
            <div class="w-full flex justify-between">
                <div class="flex flex-col w-[45%]">
                    <label for="firstName">First Name</label>
                    <div class="InputFields">
                        <span class="material-symbols-outlined icon">first_page</span>
                        <input id="first_name_input" maxlength="20" name="firstName" required>
                        <div class="InputFieldBottomLine"></div>
                    </div>
                </div>
                <div class="flex flex-col w-[45%]">
                    <label for="lastName">Last Name</label>
                    <div class="InputFields">
                        <span class="material-symbols-outlined icon">last_page</span>
                        <input id="last_name_input" maxlength="20" name="lastName" required>
                        <div class="InputFieldBottomLine"></div>
                    </div>
                </div>
            </div>
            <label>Username</label>
            <div class="InputFields">
                <span class="material-symbols-outlined icon"> person</span>
                <input name="Username" required>
                <div class="InputFieldBottomLine"></div>
                <span id="usernameExisted" class="hidden" style="color: red;">Username Existed</span>
            </div>
            <label>Account Name</label>
            <div class="InputFields">
                <span class="material-symbols-outlined icon"> person</span>
                <input name="accountName" required>
                <div class="InputFieldBottomLine"></div>
                <span id="accountNameRules" class="hidden" style="color: red; font-size: 12px;">
                    Account Name must follow these rules</br>
                    *Account Name must contain at least one alphabet character</br>
                    *Account Name cannot contain symbol or space</br>
                    *Account Name must start with alphabet character</br>
                    *Account Name must contain more than 6 characters
                </span>
            </div>
            <label>Password</label>
            <div class="InputFields">
                <span class="material-symbols-outlined icon"> lock</span>
                <input name="Password" type="password" required>
                <div class="InputFieldBottomLine"></div>
                <span id="passwordRules" class="hidden" style="color: red;">
                    Password must follow these rules</br>
                    *Must contains at least one uppercase character</br>
                    *Must use number alphabet combination</br>
                    *Not less than 6 chatracters</br>
                    *Cannot contain symbols
                </span>
            </div>
            <!-- Gender Checkbox -->
            <label>Gender</label>
            <div style="display: flex; justify-content: space-around; margin-top: 10px;">
                <div class="gender-checkbox" style="display: flex; flex-direction: column; gap: 10px; align-items: center;">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="	#2986cc" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-mars">
                        <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                        <path d="M10 14m-5 0a5 5 0 1 0 10 0a5 5 0 1 0 -10 0" />
                        <path d="M19 5l-5.4 5.4" />
                        <path d="M19 5l-5 0" />
                        <path d="M19 5l0 5" />
                    </svg>
                    <p style="margin: 0;">Male</p>
                    <input checked type="radio" name="Gender" value="Male" required>
                </div>
                <div class="gender-checkbox" style="display: flex; flex-direction: column; gap: 10px; align-items: center;">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="#c90076" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-venus">
                        <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                        <path d="M12 9m-5 0a5 5 0 1 0 10 0a5 5 0 1 0 -10 0" />
                        <path d="M12 14l0 7" />
                        <path d="M9 18l6 0" />
                    </svg>
                    <p style="margin: 0;">Female</p>
                    <input type="radio" name="Gender" value="Female" required>
                </div>
            </div>
            <button type="submit" class="sign-up-button" style="margin-top: 30px;">Sign up</button>
        </form>

        <div class="alreadyHaveAnAccount">
            <p>Already have an account?</p>
            <a href="/login">Go to login >></a>
        </div>

    </div>

    <script>

        inputIconAnimation();
        signupVerifier();


        function inputIconAnimation() {
            document.querySelectorAll(".InputFields input").forEach(InputField => {
                InputField.addEventListener('focus', (event) => {
                    var UserIcon = event.target.parentNode.querySelector("span");
                    UserIcon.classList.add("IconFocus");
                })

                InputField.addEventListener('blur', (event) => {
                    var UserIcon = event.target.parentNode.querySelector("span");
                    UserIcon.classList.remove("IconFocus");
                })
            })
        }

        function isAccountNameAlreadyExisted() {
            var accountName = document.querySelector(".InputFields input[name='accountName']").value;

            return new Promise((resolve, reject) => {
                fetch('verify-account-name', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ accountName: accountName })
                })
                    .then(response => response.json())
                    .then(data => resolve(data.isAccountNameAlreadyExisted))
                    .catch(error => reject(error))
            })

        }

        async function checkAccountNameValidity() {
            var accountName = document.querySelector(".InputFields input[name='accountName']").value;
            var regex = {
                Symbol: /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?\s]+/,
                Alphabet: /[a-zA-Z]/,
                Number: /\d/
            }

            return new Promise((resolve, reject) => {
                isAccountNameAlreadyExisted()
                    .then(result => {
                        if (result === true) {
                            displayMessage("accountNameExist"); //show message
                            resolve(false);
                        } else {    //must contain alphabet             //must start with alphabet              //cannot contain symbol     //must more than 6                                                       
                            if (!(regex.Alphabet.test(accountName)) || !(regex.Alphabet.test(accountName[0])) || regex.Symbol.test(accountName) || accountName.length < 6 || !(regex.Number.test(accountName))) {
                                displayMessage("accountNameRules");
                                resolve(false);
                            } else {
                                resolve(true);
                            }
                        }
                    })
                    .catch(error => console.log('function isAccountNameAlreadyExisted error: ' + error))
            })

        }


        function isPasswordValid() {

            var password = document.querySelector(".InputFields input[name='Password']").value;
            var passwordRulesDiaplayer = document.querySelector("#passwordRules");
            var valid = true;

            if ((containsUppercase(password) && password.length > 6 && /\d/.test(password) && !(/[\W_]\s/.test(password)))) {
                valid = true;
            } else {
                displayMessage("passwordRules");
                valid = false;
            }

            return valid;
        }

        function containsUppercase(str) {
            var arr = str.split(''); //convert to array in order to filter uppercase character
            var upperCaseChar = arr.filter(char => char === char.toUpperCase());

            return upperCaseChar.length > 0;
        }

        async function signupVerifier() {
            document.querySelector(".sign-up-form").addEventListener('submit', async (event) => {
                event.preventDefault();
                if(document.getElementById('first_name_input').value === '') return;
                if(document.getElementById('last_name_input').value === '') return;

                // Check username

                //check account name
                const isAccountNameValid = await checkAccountNameValidity();
                if(!isAccountNameValid) return;

                //check password
                if (!isPasswordValid()) return;

                event.target.submit();
            })
        }

        function displayMessage(name) {
            var accountNameExistedDisplayer = document.querySelector("#usernameExisted").classList;
            var accountNameRulesDisplayer = document.querySelector("#accountNameRules").classList;
            var passwordRulesDiaplayer = document.querySelector("#passwordRules").classList;

            switch (name) {
                case "accountNameExist":
                    accountNameExistedDisplayer.remove("hidden");
                    accountNameRulesDisplayer.add("hidden");
                    passwordRulesDiaplayer.add("hidden");
                    break;

                case "accountNameRules":
                    accountNameExistedDisplayer.add("hidden");
                    accountNameRulesDisplayer.remove("hidden");
                    passwordRulesDiaplayer.add("hidden");
                    break;

                case "passwordRules":
                    accountNameExistedDisplayer.add("hidden");
                    accountNameRulesDisplayer.add("hidden");
                    passwordRulesDiaplayer.remove("hidden");
                    break;
            }
        }
    </script>


<%- include('partials/footer') %>